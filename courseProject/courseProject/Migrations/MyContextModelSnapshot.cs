// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using courseProject.Data;

namespace courseProject.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("courseProject.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Role_Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Role_Name = "admin" },
                        new { Id = 2, Role_Name = "patient" }
                    );
                });

            modelBuilder.Entity("courseProject.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Desc1");

                    b.Property<string>("Desc2");

                    b.Property<int>("Max");

                    b.Property<int>("Min");

                    b.Property<string>("Question");

                    b.Property<int>("TherapyId");

                    b.HasKey("Id");

                    b.HasIndex("TherapyId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("courseProject.Models.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Therapy_Name");

                    b.HasKey("Id");

                    b.ToTable("Therapies");
                });

            modelBuilder.Entity("courseProject.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Full_Name");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, Full_Name = "admin", Login = "admin", Password = "admin", RoleId = 1 },
                        new { Id = 2, Full_Name = "patient 1", Login = "test", Password = "test", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("courseProject.Models.User_Answers", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("SurveyId");

                    b.Property<string>("Answer");

                    b.HasKey("UserId", "SurveyId");

                    b.HasIndex("SurveyId");

                    b.ToTable("User_Answers");
                });

            modelBuilder.Entity("courseProject.Models.User_Therapy", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("TherapyId");

                    b.HasKey("UserId", "TherapyId");

                    b.HasIndex("TherapyId");

                    b.ToTable("User_Therapy");
                });

            modelBuilder.Entity("courseProject.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Desc");

                    b.Property<int>("TherapyId");

                    b.Property<string>("Url_Video");

                    b.HasKey("Id");

                    b.HasIndex("TherapyId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("courseProject.Models.Survey", b =>
                {
                    b.HasOne("courseProject.Models.Therapy", "Survey_Therapy")
                        .WithMany("Surveys")
                        .HasForeignKey("TherapyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("courseProject.Models.User", b =>
                {
                    b.HasOne("courseProject.Models.Role", "User_Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("courseProject.Models.User_Answers", b =>
                {
                    b.HasOne("courseProject.Models.Survey", "Survey")
                        .WithMany("User_Answers")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("courseProject.Models.User", "User")
                        .WithMany("User_Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("courseProject.Models.User_Therapy", b =>
                {
                    b.HasOne("courseProject.Models.Therapy", "Therapy")
                        .WithMany("User_Therapies")
                        .HasForeignKey("TherapyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("courseProject.Models.User", "User")
                        .WithMany("User_Therapies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("courseProject.Models.Video", b =>
                {
                    b.HasOne("courseProject.Models.Therapy", "Video_Therapy")
                        .WithMany("Videos")
                        .HasForeignKey("TherapyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
